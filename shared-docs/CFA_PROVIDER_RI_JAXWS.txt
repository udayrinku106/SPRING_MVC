Developing a provider using contract first approach with document / wrapped

public interface OxfordBookLibrary {

 public BookStoreList searchBook(
			Criteria criteria);

}


We have to develope a wsdl for this interface.
Medicine list is a collection type.

MedicineList=List<Medicine>//important

Create a dynamic web project.

Put the below wsdl in the project root directory/WebContent/WEB-INF.

So here is the wsdl for above interface:

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<wsdl:definitions xmlns:obw="http://www.oxford.com/book/wsdl"
	xmlns:obt="http://www.oxford.com/book/types" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	name="OxfordBookLibrary" targetNamespace="http://www.oxford.com/book/wsdl">
	<wsdl:types>
		<xsd:schema targetNamespace="http://www.oxford.com/book/types"
			elementFormDefault="qualified">
			<!-- <xsd:element name="NewOperation"> <xsd:complexType> <xsd:sequence> 
				<xsd:element name="in" type="xsd:string"/> </xsd:sequence> </xsd:complexType> 
				</xsd:element> <xsd:element name="NewOperationResponse"> <xsd:complexType> 
				<xsd:sequence> <xsd:element name="out" type="xsd:string"/> </xsd:sequence> 
				</xsd:complexType> </xsd:element> -->
			<xsd:complexType name="Criteria">
				<xsd:sequence>
					<xsd:element name="bookName" type="xsd:string"></xsd:element>
					<xsd:element name="courseName" type="xsd:string"></xsd:element>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="BookStore">
				<xsd:sequence>
					<xsd:element name="bookName" type="xsd:string"></xsd:element>
					<xsd:element name="courseName" type="xsd:string"></xsd:element>
					<xsd:element name="authorName" type="xsd:string"></xsd:element>
					<xsd:element name="bookPrice" type="xsd:float"></xsd:element>
					<xsd:element name="bookStoreName" type="xsd:string"></xsd:element>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="BookStoreList">
				<xsd:sequence>
					<xsd:element name="listBookStore" type="obt:BookStore" maxOccurs="unbounded" minOccurs="0"></xsd:element>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:element name="searchBookResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="ListBookStore_Result" type="obt:BookStoreList"></xsd:element>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			
			<xsd:element name="searchBook">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="criteria" type="obt:Criteria"></xsd:element>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:schema>
	</wsdl:types>
	<wsdl:message name="OxfordBookLibrary_searchBook">
		<wsdl:part element="obt:searchBook" name="in" />
	</wsdl:message>
	<wsdl:message name="OxfordBookLibrary_searchBookResponse">
		<wsdl:part element="obt:searchBookResponse" name="out" />
	</wsdl:message>
	<wsdl:portType name="OxfordBookLibrary">
		<wsdl:operation name="searchBook">
			<wsdl:input message="obw:OxfordBookLibrary_searchBook" />
			<wsdl:output message="obw:OxfordBookLibrary_searchBookResponse" />
		</wsdl:operation>
	</wsdl:portType>
	<wsdl:binding name="OxfordBookLibrarySOAPBinding" type="obw:OxfordBookLibrary">
		<soap:binding style="document"
			transport="http://schemas.xmlsoap.org/soap/http" />
		<wsdl:operation name="searchBook">
			<soap:operation soapAction="http://www.oxford.com/book/wsdl/searchBook" />
			<wsdl:input>
				<soap:body use="literal" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" />
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	<wsdl:service name="OxfordBookLibraryService">
		<wsdl:port binding="obw:OxfordBookLibrarySOAPBinding" name="OxfordBookLibrarySOAPPort">
			<soap:address location="http://www.example.org/" />
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>


>set JAVA_HOME=C:\Program Files\Java\jdk1.5.0_10
>set path=%JAVA_HOME%\bin
>set path=%path%;C:\Sun\jwsdp-2.0\jaxws\bin

Note: all the above commands should run in the root directory of the project:

Now in the WEB-INF\lib put all the jars provided by jaxws (c:\jwsdp-2.0\jaxws)

For contract first approach we have to run the wsimport tool privided by jaxws ri implementation.

Type the below command at the project root directory:

>wsimport -d src -keep -verbose WebContent\WEB-INF\OxfordBookLibrary.wsdl

This will generate
>all the complex type specific classes
>sei interface with appropiate annotation
>service class(to be used by consumer to acces the webservice)

This is the sei interface generated by the wsimport tool:


package com.oxford.book.wsdl;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import com.oxford.book.types.BookStoreList;
import com.oxford.book.types.Criteria;
import com.oxford.book.wsdl.OxfordBookLibrary;


/**
 * This class was generated by the JAXWS SI.
 * JAX-WS RI 2.0-b26-ea3
 * Generated source version: 2.0
 * 
 */
@WebService(name = "OxfordBookLibrary",  targetNamespace = "http://www.oxford.com/book/wsdl", wsdlLocation = "WEB-INF\\OxfordBookLibrary.wsdl")
public interface OxfordBookLibrary {


    /**
     * 
     * @param criteria
     * @return
     *     returns com.oxford.book.types.BookStoreList
     */
    @WebMethod(action = "http://www.oxford.com/book/wsdl/searchBook")
    @WebResult(name = "ListBookStore_Result", targetNamespace = "http://www.oxford.com/book/types")
    @RequestWrapper(localName = "searchBook", targetNamespace = "http://www.oxford.com/book/types", className = "com.oxford.book.types.SearchBook")
    @ResponseWrapper(localName = "searchBookResponse", targetNamespace = "http://www.oxford.com/book/types", className = "com.oxford.book.types.SearchBookResponse")
    public BookStoreList searchBook(
        @WebParam(name = "criteria", targetNamespace = "http://www.oxford.com/book/types")
        Criteria criteria);

}

Now from here follow the below steps:

>create the implementation class for sei interface
package com.oxford.book.wsdl;

import javax.jws.WebService;

import com.oxford.book.types.BookStore;
import com.oxford.book.types.BookStoreList;
import com.oxford.book.types.Criteria;
@WebService(endpointInterface="com.oxford.book.wsdl.OxfordBookLibrary",serviceName="OxforBookLibraryService",portName="OxfordBookLibrarySOAPPort")
public class OxfordBookLibraryImpl implements OxfordBookLibrary {

	public BookStoreList searchBook(Criteria criteria) {
		// TODO Auto-generated method stub
		BookStoreList bsl=new BookStoreList();
		
		BookStore bs1=new BookStore();
		bs1.setBookStoreName("KANCHAN BOOK STORE");
		bs1.setBookName(criteria.getBookName());
		bs1.setCourseName("MCA,BTECH(CS");
		bs1.setAuthorName("BALAGURUSWAMY");
		bs1.setBookPrice(202.35f);
		
		BookStore bs2=new BookStore();
		bs2.setBookStoreName("LEARN HIGH BOOK STORE");
		bs2.setBookName(criteria.getBookName());
		bs2.setCourseName("MCA,BTECH(CS");
		bs2.setAuthorName("Dennis Ritchie");
		bs2.setBookPrice(292.35f);
		
		
		bsl.getListBookStore().add(bs1);
		bsl.getListBookStore().add(bs2);
		
		return bsl;
	}

}

>get the sun-jaxws.xml file from samples(C:\jwsdp2.0\jaxws) and configure the url pattern and implementation class details
and then place inside web-inf

<?xml version="1.0" encoding="UTF-8"?>

<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the "License").  You may not use this file except
 in compliance with the License.
 
 You can obtain a copy of the license at
 https://jwsdp.dev.java.net/CDDLv1.0.html
 See the License for the specific language governing
 permissions and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 HEADER in each file and include the License file at
 https://jwsdp.dev.java.net/CDDLv1.0.html  If applicable,
 add the following below this CDDL HEADER, with the
 fields enclosed by brackets "[]" replaced with your
 own identifying information: Portions Copyright [yyyy]
 [name of copyright owner]
-->

<endpoints xmlns='http://java.sun.com/xml/ns/jax-ws/ri/runtime' version='2.0'>
    <endpoint
        name='OxforBookLibraryService'
        implementation='com.oxford.book.wsdl.OxfordBookLibraryImpl'
        url-pattern='/bookservice'/>
</endpoints>



>Also get the content of web.xml from samples(C:\jwsdp2.0\jaxws) and map it the url pattern specified in ur sun-jaxws
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  <display-name>CONTRACT_First_JAXWS_OxforBookLibraryService</display-name>
  <listener>
    <listener-class>com.sun.xml.ws.transport.http.servlet.WSServletContextListener</listener-class>
  </listener>
  <servlet>
    <servlet-name>OxforBookLibraryService</servlet-name>
    <servlet-class>com.sun.xml.ws.transport.http.servlet.WSServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>OxforBookLibraryService</servlet-name>
    <url-pattern>/bookservice</url-pattern>
  </servlet-mapping>
</web-app>

>Now right click,run on server and access the applicatione through ur url pattern
>u will see the web service dash board and get the wsdl url
>using wsdl url test ur provider through soap ui

Note: The consumer application for this webservice is at

